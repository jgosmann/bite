name: CI and release pipeline

on:
  pull_request:
  push:
    branches: ["main", "develop"]
    tags: ["*"]

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check:
          - name: Check code-formatting
            run: poetry run ruff format --check .
          - name: Lint
            run: poetry run ruff check
          - name: Check static typing
            run: poetry run mypy bite
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-py3.13-venv-0-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py3.13-venv-0-
      - uses: ./.github/actions/setup-project

      - name: ${{ matrix.check.name }}
        run: ${{ matrix.check.run }}

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-py${{ matrix.python-version }}-venv-0-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-venv-0-
      - uses: ./.github/actions/setup-project

      - name: Test and measure coverage with pytest
        run: poetry run pytest --verbose --cov=bite --cov-report=xml
      - uses: codecov/codecov-action@v3

  documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-py3.13-venv-0-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py3.13-venv-0-
      - uses: ./.github/actions/setup-project

      - name: Check documentated arguments match function signature
        run: find bite -name "*.py" | xargs poetry run darglint

      - name: Build documentation
        run: poetry run make html SPHINXOPTS="-W"
        working-directory: docs

      - name: Check links
        run: poetry run make linkcheck
        working-directory: docs

      - name: Test examples
        run: poetry run make doctest
        working-directory: docs

      - name: Set version_name
        id: version_name
        run: echo "version_name=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html
          destination_dir: ./docs/en/${{ steps.version_name.outputs.version_name }}
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

      - name: Checkout gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: gh-pages
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

      - name: Update versions.json manifest
        run: python docs/versions_manifest.py --link-stable --output gh-pages/docs/versions.json gh-pages/docs/en
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

      - name: Deploy versions.json manifest
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

  release:
    runs-on: ubuntu-latest
    needs: [static-analysis, test]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
      - uses: actions/cache@v3
        with:
          path: .venv
          key: ${{ runner.os }}-py3.13-venv-0-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-py3.13-venv-0-
      - uses: ./.github/actions/setup-project

      - name: Publish to PyPI
        run: poetry publish --build
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}

      - name: Set version
        id: version
        run: echo "version=${GITHUB_REF#refs/*/v}" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: changelog
        run: sed -E -n '/^\[${{ steps.version.outputs.version }}\]/,/^\[[0-9\.]+\]/{/^\[[0-9\.]+\]|^-+$/!p;}' CHANGELOG.rst > release-body.rst

      - uses: docker://pandoc/core:2.19
        with:
          args: --standalone --wrap none -f rst -t gfm --output=release-body.md release-body.rst

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-body.md
          tag_name: v${{ steps.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
